host='127.0.0.1'
dbname=gis
user=trolleway
password=

file=dump.osm.pbf
dump=dump

#импорт в схему shapshot
#миграция БД с https://wiki.openstreetmap.org/wiki/Osmosis/PostGIS_Setup

psql --username $user  --dbname $dbname --command='CREATE EXTENSION postgis; CREATE EXTENSION hstore;'
PGPASSWORD=$password  psql --host $host --username $user --dbname=$dbname -a -f /usr/share/doc/osmosis/examples/pgsnapshot_schema_0.6.sql
ogr2ogr -nln user_redzones -overwrite -progress PG:"host=$host dbname=$dbname user=$user password=$password" userpolygon.geojson

osmconvert $dump.osm.pbf -o=$dump.o5m
osmfilter $dump.o5m --keep="highway" --keep-relations="type=restriction" --out-o5m >$dump-filtered.o5m
osmconvert $dump-filtered.o5m -o=$dump-filtered.osm
rm -rf $dump-filtered.o5m $dump.o5m
osmosis --read-xml dump-filtered.osm --log-progress --write-pgsql database=gis  authFile=osmosis_creds.cfg

PGPASSFILE=.pgpass

PGPASSWORD=$password psql --host $host --username $user --dbname=$dbname -a -f process.sql


#osmosis --read-pgsql authFile=osmosis_creds.cfg  validateSchemaVersion=no  --dataset-dump --write-xml file="output.osm"




-- Линии, пересекающие границу зоны, удаляются. Вместо них создаются две новые

--Конвертация схемы юзерских линий (перенос атрибутов в hstore)
-- BLOCK 01

ALTER TABLE user_redzones DROP COLUMN IF EXISTS tags;
ALTER TABLE user_redzones ADD COLUMN tags hstore;

--высасывание определённых атрибутов в hstore
UPDATE user_redzones SET tags=hstore('condition', 'red'::text);
--Создать точки на всех их узлах



--разворачивание массива со списком нодов в вее в отдельную таблицу, приклеивание к ней геометрии точек
--но в этот раз только тех нодов, что касаются границы полигонов
--а как я узнаю, какие касаются, если геометрии собственно нет?

-- BLOCK 03
DROP TABLE IF EXISTS nodes_ways;
CREATE TABLE nodes_ways AS
(
  SELECT
  row_number() OVER () AS id,
  ordinality as node_order,
  node_id,
  ways.id AS way_id
  FROM ways,  unnest(ways.nodes) WITH ORDINALITY AS node_id
  WHERE ways.tags ? 'highway'
);

ALTER TABLE nodes_ways ADD PRIMARY KEY(id);
ALTER TABLE nodes_ways ADD COLUMN wkb_geometry geometry(Point,4326);
UPDATE nodes_ways
SET wkb_geometry = nodes.geom
FROM
nodes
WHERE
nodes.id=nodes_ways.node_id;

-- сборка linestrings
DROP TABLE IF EXISTS ways_linestrings;
CREATE TABLE ways_linestrings AS TABLE ways;
DELETE FROM ways_linestrings WHERE tags ? 'highway' = false;


ALTER TABLE ways_linestrings ADD COLUMN wkb_geometry geometry(Linestring,4326);
--ALTER TABLE ways_linestrings ADD COLUMN points array geometry(Linestring,4326);

UPDATE ways_linestrings
SET wkb_geometry = subquery.wkb_geometry
FROM
(SELECT nodes_ways.way_id, ST_MakeLine(nodes_ways.wkb_geometry ORDER BY node_order::bigint) As wkb_geometry	FROM nodes_ways	GROUP BY way_id
) as subquery

WHERE
subquery.way_id=ways_linestrings.id;

--это она создала линии с лайнстрингами

-- ============================================


/*
Веи получаются 4 типов
1. Те что целиком внутри зоны (covered by) - добавляется специальный тег.
2. Те что снаружи зоны (not intersect) - не трогаются
3. Те что касаются границы. Вместо них генерятся по 2 новые линии, а эти удаляются

Нужно не забыть случай, когда W-образная дорога пересекает границу несколько раз

*/


--
-- 1. Те что целиком внутри зоны (covered by) - добавляется специальный тег.
--
--я тут пишу, всё что тут  - н иеспольеиеов

DROP TABLE IF EXISTS nodes_in_dangerzone;
CREATE TABLE nodes_in_dangerzone AS
SELECT nodes.* FROM nodes JOIN user_redzones ON ST_INTERSECTS(nodes.geom,user_redzones.wkb_geometry);

 DROP SEQUENCE public.nodes_id_seq;

 CREATE SEQUENCE IF NOT EXISTS public.nodes_id_seq
     INCREMENT -1
     START -1000 --1999999999
     NO MINVALUE
     NO MAXVALUE
     CACHE 1;


DROP TABLE IF EXISTS new_nodes_on_old_ways;
DROP TABLE IF EXISTS new_nodes;

CREATE TABLE new_nodes_on_old_ways AS
SELECT
(ST_Dump(ST_Intersection(ways_linestrings.wkb_geometry, ST_ExteriorRing(user_redzones.wkb_geometry)))).geom AS wkb_geometry,
ways_linestrings.id AS oldway
 from ways_linestrings JOIN user_redzones
ON ST_INTERSECTS(ways_linestrings.wkb_geometry, ST_ExteriorRing(user_redzones.wkb_geometry));

INSERT INTO nodes (id,version,user_id,tstamp,changeset_id,tags,geom)
(SELECT nextval('nodes_id_seq'::regclass) AS id,
1 AS version,
-1 AS user_id,
current_timestamp(0) AS tstamp, --timestamp withouth seconds
0 AS changeset_id,
'source=>OSM_fill_graph'::hstore AS tags,
new_nodes_on_old_ways.wkb_geometry AS geom
FROM new_nodes_on_old_ways
);


-- функция принимает id ноды
CREATE OR REPLACE FUNCTION is_node_in_zone(bigint) RETURNS boolean AS $$
DECLARE
   status boolean;
   vc_result varchar;
BEGIN
    SELECT COUNT(nodes_in_dangerzone.*) INTO vc_result FROM nodes_in_dangerzone WHERE id = $1;
    status := vc_result::boolean;
RETURN status;
END;
$$ LANGUAGE plpgsql;

-- функция принимает 2 id нодов
CREATE OR REPLACE FUNCTION get_nodeid_beetwen(bigint,bigint) RETURNS bigint AS $$
DECLARE
  -- status boolean;
  status bigint;
BEGIN
  SELECT t3.id INTO status
  FROM nodes AS t1 , nodes AS t2, nodes AS t3
  WHERE t1.id=$1 AND t2.id=$2 AND st_dwithin(ST_MakeLine(t1.geom, t2.geom),t3.geom,0.000001)
  AND t3.id < 0; --magic id, generated by this script
RETURN status;
END;
$$ LANGUAGE plpgsql;

SELECT get_nodeid_beetwen(412539987,3889575869);

SELECT relation_status(4899100088) AS rels;

--node not in danger zone SELECT ST_Intersects(nodes.geom,area.wkb_geometry) INTO vc_result FROM nodes,user_redzones AS area WHERE nodes.id = $1;
--4899100088;

-- функция принимает массив нодов,
CREATE OR REPLACE FUNCTION node_process(bigint[]) RETURNS bigint[] AS $$
DECLARE
    node_id bigint;
    new_nodes bigint[];
    prev_in_poly boolean;
    current_in_poly boolean;
    prev_node_id bigint;
BEGIN


    FOREACH node_id IN ARRAY $1
    LOOP
        prev_in_poly := current_in_poly;
        IF is_node_in_zone(node_id) = true THEN --если это вход в зону
          current_in_poly := true;
           IF prev_in_poly = false AND current_in_poly = true THEN
              new_nodes = new_nodes || get_nodeid_beetwen(prev_node_id,node_id);
           END IF;
           new_nodes = new_nodes || node_id;
        ELSE
            current_in_poly := false;
            IF prev_in_poly = true AND current_in_poly = false THEN --если это выход из зоны
                new_nodes = new_nodes || get_nodeid_beetwen(prev_node_id,node_id);
            END IF;


        END IF;
    prev_node_id = node_id;
    END LOOP;

RETURN new_nodes;
END;
$$ LANGUAGE plpgsql;


DROP TABLE IF EXISTS ways4add;
CREATE TABLE ways4add AS
SELECT ways.*
FROM ways_linestrings  ,  user_redzones,ways WHERE
                    ST_Intersects(ways_linestrings.wkb_geometry,user_redzones.wkb_geometry)
					AND ways_linestrings.id=ways.id;

UPDATE ways4add SET nodes = node_process(nodes);


UPDATE ways4add SET tags = tags ||  ('danger_zone => 1') ;

DELETE FROM ways WHERE id IN (SELECT id FROM ways4add);
INSERT INTO ways SELECT * FROM ways4add;

----------------

